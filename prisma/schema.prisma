// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  onboarded DateTime?

  email     String  @unique
  username  String? @unique
  firstName String?
  lastName  String?

  password       Password?     @relation(fields: [passwordId], references: [id])
  passwordId     Int?          @unique
  phoneNumber    PhoneNumber?  @relation(fields: [phoneNumberId], references: [id])
  phoneNumberId  Int?          @unique
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId Int?          @unique
  roles          Role[]
  sessions       Session[]
  onboarding     Onboarding?
}

model Password {
  id Int @id @default(autoincrement())

  updatedAt DateTime @updatedAt

  hash String

  user User?
}

model OTP {
  id Int @id @default(autoincrement())

  // this is used to invalidate unused OTPs 
  // rather than having another column "expiresAt"
  // just in case we want to change how frequently
  // OTPs are removed without rewriting in the database
  createdAt DateTime @default(now())
  usedAt    DateTime @updatedAt

  email      String @unique // only one code per email at a time
  codeHash   String @unique
  type       String // could opt for an enum if you're using Postgres
  redirectTo String // could opt for an enum if you're using Postgres
}

model Session {
  id Int @id @default(autoincrement())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
  revokedAt DateTime?

  ipAddress String?
  context   String? // could opt for an enum if you're using Postgres

  // user agent data
  // extracted from next.js userAgent function
  // source: https://nextjs.org/docs/app/api-reference/functions/userAgent
  ua              String?
  isBot           Boolean?
  browserName     String?
  browserVersion  String?
  browserMajor    String?
  deviceModel     String?
  deviceType      String?
  deviceVendor    String?
  engineName      String?
  engineVersion   String?
  osName          String?
  osVersion       String?
  cpuArchitecture String?

  // geo location data
  // this is typed according to the IPinfo API which gives unlimited, simple requests for free
  // https://ipinfo.io/
  hostname String?
  city     String?
  region   String?
  country  String?
  loc      String?
  org      String?
  postal   String?
  timezone String?

  metadata Json? // additional store if you need something flexibile e.g. AB testing

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
}

model Onboarding {
  id Int @id @default(autoincrement())

  startedAt   DateTime  @default(now())
  completedAt DateTime?
  updatedAt   DateTime  @updatedAt

  currentStep    OnboardingSteps   @default(CREDENTIALS) // current step
  completedSteps OnboardingSteps[]
  stepTimeStamps Json?

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

enum OnboardingSteps {
  CREDENTIALS
  PERSONAL_INFO
  ORGANIZATION
  COMPLETED
}

model PhoneNumber {
  id Int @id @default(autoincrement())

  countryCode String
  number      String

  user User?

  @@unique([countryCode, number])
}

model Organization {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  users User[]
  roles Role[]
}

model Permission {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  action String
  access String
  entity String

  roles Role[]

  @@unique([action, access, entity])
}

model Role {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissions    Permission[]
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int          @unique
  users          User[]
}
